'''
Business: –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Bot API, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏, –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
Args: event —Å httpMethod, body (JSON –æ—Ç Telegram), context —Å request_id
Returns: HTTP response 200 OK –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è update
'''

import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.request

BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.environ.get('DATABASE_URL')
IMAGE_API_URL = os.environ.get('IMAGE_API_URL', '')
VIDEO_API_URL = os.environ.get('VIDEO_API_URL', '')
STORYBOARD_API_URL = os.environ.get('STORYBOARD_API_URL', '')

PREVIEW_COST = 30
VIDEO_COSTS = {
    5: {'standard': 180, 'high': 380},
    10: {'standard': 400, 'high': 600},
    15: {'standard': 600, 'high': 800}
}

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def send_telegram_message(chat_id: int, text: str, reply_markup: Optional[Dict] = None):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    data = {'chat_id': chat_id, 'text': text, 'parse_mode': 'HTML'}
    if reply_markup:
        data['reply_markup'] = reply_markup
    
    req = urllib.request.Request(
        url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    with urllib.request.urlopen(req) as response:
        return json.loads(response.read().decode('utf-8'))

def main_menu_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', 'callback_data': 'main_create'}],
            [{'text': 'üí∞ –ë–∞–ª–∞–Ω—Å', 'callback_data': 'main_balance'}],
            [{'text': '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'main_topup'}],
            [{'text': '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'callback_data': 'main_help'}]
        ]
    }

def create_menu_keyboard():
    return {
        'inline_keyboard': [
            [{'text': 'üé® –ü—Ä–µ–≤—å—é', 'callback_data': 'create_preview'}],
            [{'text': 'üìù –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞', 'callback_data': 'create_textvideo'}],
            [{'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }

def check_rate_limit(conn, user_id: int, action_type: str, max_actions: int = 10) -> bool:
    with conn.cursor() as cur:
        cur.execute("""
            SELECT action_count, window_start 
            FROM t_p62125649_ai_video_bot.rate_limits 
            WHERE user_id = %s AND action_type = %s
        """, (user_id, action_type))
        
        result = cur.fetchone()
        now = datetime.now()
        
        if not result:
            cur.execute("""
                INSERT INTO t_p62125649_ai_video_bot.rate_limits (user_id, action_type, action_count, window_start)
                VALUES (%s, %s, 1, %s)
            """, (user_id, action_type, now))
            conn.commit()
            return True
        
        action_count, window_start = result
        
        if now - window_start > timedelta(minutes=1):
            cur.execute("""
                UPDATE t_p62125649_ai_video_bot.rate_limits 
                SET action_count = 1, window_start = %s
                WHERE user_id = %s AND action_type = %s
            """, (now, user_id, action_type))
            conn.commit()
            return True
        
        if action_count >= max_actions:
            return False
        
        cur.execute("""
            UPDATE t_p62125649_ai_video_bot.rate_limits 
            SET action_count = action_count + 1
            WHERE user_id = %s AND action_type = %s
        """, (user_id, action_type))
        conn.commit()
        return True

def get_or_create_user(conn, user_id: int, username: str, first_name: str) -> Dict:
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("SELECT * FROM t_p62125649_ai_video_bot.users WHERE user_id = %s", (user_id,))
        user = cur.fetchone()
        
        if not user:
            cur.execute("""
                INSERT INTO t_p62125649_ai_video_bot.users (user_id, username, first_name, balance)
                VALUES (%s, %s, %s, 500)
                RETURNING *
            """, (user_id, username, first_name))
            user = cur.fetchone()
            
            cur.execute("""
                INSERT INTO t_p62125649_ai_video_bot.transactions (user_id, amount, type, description)
                VALUES (%s, 500, 'welcome_bonus', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å')
            """, (user_id,))
            
            conn.commit()
            return {'user': dict(user), 'is_new': True}
        
        cur.execute("""
            UPDATE t_p62125649_ai_video_bot.users 
            SET last_activity = CURRENT_TIMESTAMP
            WHERE user_id = %s
        """, (user_id,))
        conn.commit()
        
        return {'user': dict(user), 'is_new': False}

def handle_start_command(conn, chat_id: int, user_id: int, username: str, first_name: str):
    user_info = get_or_create_user(conn, user_id, username, first_name)
    user = user_info['user']
    
    if user.get('is_blocked'):
        send_telegram_message(chat_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support")
        return
    
    if user_info['is_new']:
        text = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Video Studio!\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –∫—Ä–µ–¥–∏—Ç–æ–≤. –•–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–ª–∏ –≤–∏–¥–µ–æ.\n\nüí° 1 –∫—Ä–µ–¥–∏—Ç = 1 —Ä—É–±–ª—å"
    else:
        text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    
    send_telegram_message(chat_id, text, main_menu_keyboard())

def handle_balance(conn, chat_id: int, user_id: int):
    with conn.cursor() as cur:
        cur.execute("SELECT balance FROM t_p62125649_ai_video_bot.users WHERE user_id = %s", (user_id,))
        result = cur.fetchone()
        
        if result:
            balance = result[0]
            keyboard = {
                'inline_keyboard': [
                    [{'text': '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'main_topup'}],
                    [{'text': 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', 'callback_data': 'main_create'}]
                ]
            }
            send_telegram_message(chat_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤", keyboard)

def handle_topup(chat_id: int):
    keyboard = {
        'inline_keyboard': [
            [{'text': '200 –∫—Ä–µ–¥–∏—Ç–æ–≤ (200‚ÇΩ)', 'callback_data': 'topup_200'}],
            [{'text': '500 –∫—Ä–µ–¥–∏—Ç–æ–≤ (500‚ÇΩ)', 'callback_data': 'topup_500'}],
            [{'text': '1000 –∫—Ä–µ–¥–∏—Ç–æ–≤ (1000‚ÇΩ)', 'callback_data': 'topup_1000'}],
            [{'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    send_telegram_message(chat_id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤:", keyboard)

def handle_help(chat_id: int):
    text = """‚ÑπÔ∏è <b>AI Video Studio Bot</b>

<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
üé® <b>–ü—Ä–µ–≤—å—é</b> (30‚ÇΩ) - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞
üìù <b>–í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞</b> - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ

<b>–¶–µ–Ω—ã –Ω–∞ –≤–∏–¥–µ–æ:</b>
5 —Å–µ–∫ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç) - 180‚ÇΩ
10 —Å–µ–∫ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç) - 400‚ÇΩ
15 —Å–µ–∫ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç) - 600‚ÇΩ
–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: +200‚ÇΩ

–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support"""
    
    keyboard = {'inline_keyboard': [[{'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]]}
    send_telegram_message(chat_id, text, keyboard)

def handle_create_preview(conn, chat_id: int, user_id: int):
    with conn.cursor() as cur:
        cur.execute("SELECT balance FROM t_p62125649_ai_video_bot.users WHERE user_id = %s", (user_id,))
        result = cur.fetchone()
        
        if not result or result[0] < PREVIEW_COST:
            send_telegram_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", main_menu_keyboard())
            return
        
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.user_states (user_id, state, updated_at)
            VALUES (%s, 'waiting_preview_prompt', CURRENT_TIMESTAMP)
            ON CONFLICT (user_id) 
            DO UPDATE SET state = 'waiting_preview_prompt', updated_at = CURRENT_TIMESTAMP
        """, (user_id,))
        conn.commit()
    
    send_telegram_message(chat_id, f"üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é</b>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {PREVIEW_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–û–ø–∏—à–∏—Ç–µ –∫–∞–¥—Ä:")

def handle_create_textvideo(conn, chat_id: int, user_id: int):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.user_states (user_id, state, updated_at)
            VALUES (%s, 'waiting_textvideo_prompt', CURRENT_TIMESTAMP)
            ON CONFLICT (user_id) 
            DO UPDATE SET state = 'waiting_textvideo_prompt', updated_at = CURRENT_TIMESTAMP
        """, (user_id,))
        conn.commit()
    
    send_telegram_message(chat_id, "üìù <b>–í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞</b>\n\n–û–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ:")

def handle_preview_prompt(conn, chat_id: int, user_id: int, prompt: str):
    with conn.cursor() as cur:
        cur.execute("SELECT balance FROM t_p62125649_ai_video_bot.users WHERE user_id = %s", (user_id,))
        result = cur.fetchone()
        
        if not result or result[0] < PREVIEW_COST:
            send_telegram_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤.", main_menu_keyboard())
            return
        
        cur.execute("UPDATE t_p62125649_ai_video_bot.users SET balance = balance - %s WHERE user_id = %s", (PREVIEW_COST, user_id))
        
        task_id = f'preview_{user_id}_{int(datetime.now().timestamp())}'
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.orders 
            (user_id, order_type, prompt, status, cost, task_id)
            VALUES (%s, 'preview', %s, 'processing', %s, %s)
            RETURNING order_id
        """, (user_id, prompt, PREVIEW_COST, task_id))
        
        order_id = cur.fetchone()[0]
        
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.transactions 
            (user_id, amount, type, description, order_id)
            VALUES (%s, %s, 'preview', '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–≤—å—é', %s)
        """, (user_id, -PREVIEW_COST, order_id))
        
        cur.execute("DELETE FROM t_p62125649_ai_video_bot.user_states WHERE user_id = %s", (user_id,))
        conn.commit()
    
    send_telegram_message(chat_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é... –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

def handle_textvideo_prompt(conn, chat_id: int, user_id: int, prompt: str):
    with conn.cursor() as cur:
        cur.execute("""
            UPDATE t_p62125649_ai_video_bot.user_states 
            SET state = 'waiting_textvideo_duration', temp_prompt = %s, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = %s
        """, (prompt, user_id))
        conn.commit()
    
    keyboard = {
        'inline_keyboard': [
            [{'text': '5 —Å–µ–∫—É–Ω–¥ (180‚ÇΩ)', 'callback_data': 'duration_5'}],
            [{'text': '10 —Å–µ–∫—É–Ω–¥ (400‚ÇΩ)', 'callback_data': 'duration_10'}],
            [{'text': '15 —Å–µ–∫—É–Ω–¥ (600‚ÇΩ)', 'callback_data': 'duration_15'}],
            [{'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'back_to_main'}]
        ]
    }
    send_telegram_message(chat_id, "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:", keyboard)

def handle_duration_selection(conn, chat_id: int, user_id: int, duration: int):
    with conn.cursor() as cur:
        cur.execute("""
            UPDATE t_p62125649_ai_video_bot.user_states 
            SET state = 'waiting_textvideo_quality', temp_duration = %s, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = %s
        """, (duration, user_id))
        conn.commit()
    
    standard_cost = VIDEO_COSTS[duration]['standard']
    high_cost = VIDEO_COSTS[duration]['high']
    
    keyboard = {
        'inline_keyboard': [
            [{'text': f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ ({standard_cost}‚ÇΩ)', 'callback_data': 'quality_standard'}],
            [{'text': f'–í—ã—Å–æ–∫–æ–µ ({high_cost}‚ÇΩ)', 'callback_data': 'quality_high'}],
            [{'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'back_to_main'}]
        ]
    }
    send_telegram_message(chat_id, f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", keyboard)

def handle_quality_selection(conn, chat_id: int, user_id: int, quality: str):
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("""
            SELECT temp_prompt, temp_duration FROM t_p62125649_ai_video_bot.user_states 
            WHERE user_id = %s
        """, (user_id,))
        state = cur.fetchone()
        
        if not state:
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", main_menu_keyboard())
            return
        
        prompt = state['temp_prompt']
        duration = state['temp_duration']
        cost = VIDEO_COSTS[duration][quality]
        
        cur.execute("SELECT balance FROM t_p62125649_ai_video_bot.users WHERE user_id = %s", (user_id,))
        result = cur.fetchone()
        
        if not result or result['balance'] < cost:
            send_telegram_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", main_menu_keyboard())
            return
        
        cur.execute("UPDATE t_p62125649_ai_video_bot.users SET balance = balance - %s WHERE user_id = %s", (cost, user_id))
        
        task_id = f'video_{user_id}_{int(datetime.now().timestamp())}'
        
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.orders 
            (user_id, order_type, prompt, duration, quality, status, cost, task_id)
            VALUES (%s, 'text-to-video', %s, %s, %s, 'processing', %s, %s)
            RETURNING order_id
        """, (user_id, prompt, duration, quality, cost, task_id))
        
        order_id = cur.fetchone()['order_id']
        
        cur.execute("""
            INSERT INTO t_p62125649_ai_video_bot.transactions 
            (user_id, amount, type, description, order_id)
            VALUES (%s, %s, 'video', %s, %s)
        """, (user_id, -cost, f'–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –≤–∏–¥–µ–æ {duration}—Å {quality}', order_id))
        
        cur.execute("DELETE FROM t_p62125649_ai_video_bot.user_states WHERE user_id = %s", (user_id,))
        conn.commit()
    
    send_telegram_message(chat_id, f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ {duration}—Å ({quality})...")

def handle_callback_query(conn, callback_query: Dict):
    callback_id = callback_query['id']
    user_id = callback_query['from']['id']
    chat_id = callback_query['message']['chat']['id']
    data = callback_query['data']
    username = callback_query['from'].get('username', '')
    first_name = callback_query['from'].get('first_name', 'User')
    
    if not check_rate_limit(conn, user_id, 'callback'):
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery'
        req_data = {'callback_query_id': callback_id, 'text': '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'}
        req = urllib.request.Request(url, data=json.dumps(req_data).encode('utf-8'), headers={'Content-Type': 'application/json'})
        urllib.request.urlopen(req)
        return
    
    user_info = get_or_create_user(conn, user_id, username, first_name)
    if user_info['user'].get('is_blocked'):
        send_telegram_message(chat_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery'
    req = urllib.request.Request(url, data=json.dumps({'callback_query_id': callback_id}).encode('utf-8'), headers={'Content-Type': 'application/json'})
    urllib.request.urlopen(req)
    
    if data == 'main_create':
        send_telegram_message(chat_id, "üé¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>", create_menu_keyboard())
    elif data == 'main_balance':
        handle_balance(conn, chat_id, user_id)
    elif data == 'main_topup':
        handle_topup(chat_id)
    elif data == 'main_help':
        handle_help(chat_id)
    elif data == 'back_to_main':
        with conn.cursor() as cur:
            cur.execute("DELETE FROM t_p62125649_ai_video_bot.user_states WHERE user_id = %s", (user_id,))
            conn.commit()
        send_telegram_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_keyboard())
    elif data == 'create_preview':
        handle_create_preview(conn, chat_id, user_id)
    elif data == 'create_textvideo':
        handle_create_textvideo(conn, chat_id, user_id)
    elif data.startswith('duration_'):
        duration = int(data.split('_')[1])
        handle_duration_selection(conn, chat_id, user_id, duration)
    elif data.startswith('quality_'):
        quality = data.split('_')[1]
        handle_quality_selection(conn, chat_id, user_id, quality)

def handle_message(conn, message: Dict):
    user_id = message['from']['id']
    chat_id = message['chat']['id']
    username = message['from'].get('username', '')
    first_name = message['from'].get('first_name', 'User')
    text = message.get('text', '')
    
    if not check_rate_limit(conn, user_id, 'message'):
        send_telegram_message(chat_id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
        return
    
    user_info = get_or_create_user(conn, user_id, username, first_name)
    if user_info['user'].get('is_blocked'):
        send_telegram_message(chat_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    if text.startswith('/start'):
        handle_start_command(conn, chat_id, user_id, username, first_name)
        return
    
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("SELECT state FROM t_p62125649_ai_video_bot.user_states WHERE user_id = %s", (user_id,))
        state = cur.fetchone()
    
    if not state:
        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", main_menu_keyboard())
        return
    
    if state['state'] == 'waiting_preview_prompt':
        handle_preview_prompt(conn, chat_id, user_id, text)
    elif state['state'] == 'waiting_textvideo_prompt':
        handle_textvideo_prompt(conn, chat_id, user_id, text)
    else:
        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:", main_menu_keyboard())

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'isBase64Encoded': False,
            'body': ''
        }
    
    try:
        body = json.loads(event.get('body', '{}'))
        conn = get_db_connection()
        
        if 'message' in body:
            handle_message(conn, body['message'])
        elif 'callback_query' in body:
            handle_callback_query(conn, body['callback_query'])
        
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'isBase64Encoded': False,
            'body': json.dumps({'ok': True})
        }
        
    except Exception as e:
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'isBase64Encoded': False,
            'body': json.dumps({'ok': True, 'error': str(e)})
        }