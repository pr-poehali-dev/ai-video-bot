"""
Business: Telegram webhook handler - processes all bot messages and callbacks
Args: event with httpMethod, body (Telegram update JSON); context with request_id
Returns: HTTP response with statusCode 200
"""

import json
import os
from typing import Dict, Any, Optional
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta

DATABASE_URL = os.environ.get('DATABASE_URL')
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def send_telegram_message(chat_id: int, text: str, reply_markup: Optional[Dict] = None):
    import urllib.request
    import urllib.parse
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    req = urllib.request.Request(
        url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    with urllib.request.urlopen(req) as response:
        return json.loads(response.read().decode('utf-8'))

def get_main_menu():
    return {
        'inline_keyboard': [
            [{'text': 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', 'callback_data': 'main_create'}],
            [{'text': 'üí∞ –ë–∞–ª–∞–Ω—Å', 'callback_data': 'main_balance'}],
            [{'text': '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'main_topup'}],
            [{'text': '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'callback_data': 'main_help'}]
        ]
    }

def check_rate_limit(conn, user_id: int, action_type: str) -> bool:
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("""
            SELECT action_count, window_start 
            FROM rate_limits 
            WHERE user_id = %s AND action_type = %s
        """, (user_id, action_type))
        
        result = cur.fetchone()
        now = datetime.now()
        
        if not result:
            cur.execute("""
                INSERT INTO rate_limits (user_id, action_type, action_count, window_start)
                VALUES (%s, %s, 1, %s)
            """, (user_id, action_type, now))
            conn.commit()
            return True
        
        window_start = result['window_start']
        if now - window_start > timedelta(minutes=1):
            cur.execute("""
                UPDATE rate_limits 
                SET action_count = 1, window_start = %s
                WHERE user_id = %s AND action_type = %s
            """, (now, user_id, action_type))
            conn.commit()
            return True
        
        if result['action_count'] >= 10:
            return False
        
        cur.execute("""
            UPDATE rate_limits 
            SET action_count = action_count + 1
            WHERE user_id = %s AND action_type = %s
        """, (user_id, action_type))
        conn.commit()
        return True

def get_or_create_user(conn, user_id: int, username: str, first_name: str) -> Dict:
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        user = cur.fetchone()
        
        if user:
            cur.execute("""
                UPDATE users 
                SET last_activity = %s, username = %s, first_name = %s
                WHERE user_id = %s
            """, (datetime.now(), username, first_name, user_id))
            conn.commit()
            return dict(user)
        
        cur.execute("""
            INSERT INTO users (user_id, username, first_name, balance, created_at, last_activity)
            VALUES (%s, %s, %s, 800, %s, %s)
            RETURNING *
        """, (user_id, username, first_name, datetime.now(), datetime.now()))
        
        new_user = cur.fetchone()
        
        cur.execute("""
            INSERT INTO transactions (user_id, amount, type, description, created_at)
            VALUES (%s, 800, 'welcome_bonus', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å', %s)
        """, (user_id, datetime.now()))
        
        conn.commit()
        return dict(new_user)

def handle_start(conn, user_id: int, username: str, first_name: str, chat_id: int):
    user = get_or_create_user(conn, user_id, username, first_name)
    
    if user['balance'] == 800 and user['created_at'].replace(tzinfo=None) > datetime.now() - timedelta(seconds=5):
        text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Video Studio!</b>\n\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>800 –∫—Ä–µ–¥–∏—Ç–æ–≤</b>. –•–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–ª–∏ –≤–∏–¥–µ–æ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        text = (
            f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    send_telegram_message(chat_id, text, get_main_menu())

def handle_balance(conn, user_id: int, chat_id: int):
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("SELECT balance FROM users WHERE user_id = %s", (user_id,))
        user = cur.fetchone()
        
        balance = user['balance'] if user else 0
        
        text = f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'main_topup'}],
                [{'text': 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', 'callback_data': 'main_create'}],
                [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
            ]
        }
        
        send_telegram_message(chat_id, text, keyboard)

def handle_topup(chat_id: int):
    text = "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤:"
    
    keyboard = {
        'inline_keyboard': [
            [{'text': '200 –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî 200‚ÇΩ', 'callback_data': 'buy_200'}],
            [{'text': '500 –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî 500‚ÇΩ', 'callback_data': 'buy_500'}],
            [{'text': '1000 –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî 1000‚ÇΩ', 'callback_data': 'buy_1000'}],
            [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
        ]
    }
    
    send_telegram_message(chat_id, text, keyboard)

def handle_create(chat_id: int):
    text = "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üé® –ü—Ä–µ–≤—å—é (30 –∫—Ä–µ–¥–∏—Ç–æ–≤)', 'callback_data': 'create_preview'}],
            [{'text': 'üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞', 'callback_data': 'create_textvideo'}],
            [{'text': 'üìΩ Storyboard (–º—É–ª—å—Ç–∏—Å—Ü–µ–Ω–∞)', 'callback_data': 'create_storyboard'}],
            [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
        ]
    }
    
    send_telegram_message(chat_id, text, keyboard)

def handle_help(chat_id: int):
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å - AI Video Studio</b>\n\n"
        "<b>üé® –ü—Ä–µ–≤—å—é</b> - 30 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∫–∞–¥—Ä –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n\n"
        "<b>üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞</b>\n"
        "‚Ä¢ 5 —Å–µ–∫ standard - 180 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ 10 —Å–µ–∫ standard - 400 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ 15 —Å–µ–∫ standard - 600 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ high –∫–∞—á–µ—Å—Ç–≤–æ - +200 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "<b>üìΩ Storyboard</b>\n"
        "–ú—É–ª—å—Ç–∏—Å—Ü–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (2-15 —Å—Ü–µ–Ω)\n"
        "–û—Ç 180 –∫—Ä–µ–¥–∏—Ç–æ–≤ + 50 –∑–∞ –∫–∞–∂–¥—É—é —Å—Ü–µ–Ω—É –ø–æ—Å–ª–µ 3-–π\n\n"
        "üí∞ 1 –∫—Ä–µ–¥–∏—Ç = 1 —Ä—É–±–ª—å"
    )
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
        ]
    }
    
    send_telegram_message(chat_id, text, keyboard)

def handle_create_preview(conn, user_id: int, chat_id: int):
    with conn.cursor(cursor_factory=RealDictCursor) as cur:
        cur.execute("SELECT balance FROM users WHERE user_id = %s", (user_id,))
        user = cur.fetchone()
        
        if user['balance'] < 30:
            text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é.\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: 30 –∫—Ä–µ–¥–∏—Ç–æ–≤"
            keyboard = {
                'inline_keyboard': [
                    [{'text': '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'main_topup'}],
                    [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
                ]
            }
            send_telegram_message(chat_id, text, keyboard)
            return
        
        cur.execute("""
            INSERT INTO user_states (user_id, state, updated_at)
            VALUES (%s, 'waiting_preview_prompt', %s)
            ON CONFLICT (user_id) DO UPDATE 
            SET state = 'waiting_preview_prompt', updated_at = %s
        """, (user_id, datetime.now(), datetime.now()))
        conn.commit()
        
        text = "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é</b>\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞–¥—Ä–µ:"
        send_telegram_message(chat_id, text)

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    try:
        body = json.loads(event.get('body', '{}'))
        conn = get_db_connection()
        
        if 'message' in body:
            message = body['message']
            user_id = message['from']['id']
            chat_id = message['chat']['id']
            username = message['from'].get('username', '')
            first_name = message['from'].get('first_name', 'User')
            text = message.get('text', '')
            
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT is_blocked FROM users WHERE user_id = %s", (user_id,))
                user = cur.fetchone()
                
                if user and user['is_blocked']:
                    send_telegram_message(chat_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support")
                    conn.close()
                    return {'statusCode': 200, 'body': json.dumps({'ok': True})}
            
            if not check_rate_limit(conn, user_id, 'message'):
                send_telegram_message(chat_id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
                conn.close()
                return {'statusCode': 200, 'body': json.dumps({'ok': True})}
            
            if text == '/start':
                handle_start(conn, user_id, username, first_name, chat_id)
            else:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    cur.execute("SELECT state FROM user_states WHERE user_id = %s", (user_id,))
                    state = cur.fetchone()
                    
                    if state and state['state'] == 'waiting_preview_prompt':
                        send_telegram_message(chat_id, "‚è≥ –°–æ–∑–¥–∞—é –ø—Ä–µ–≤—å—é... –≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥.")
        
        elif 'callback_query' in body:
            callback = body['callback_query']
            user_id = callback['from']['id']
            chat_id = callback['message']['chat']['id']
            username = callback['from'].get('username', '')
            first_name = callback['from'].get('first_name', 'User')
            data = callback['data']
            
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT is_blocked FROM users WHERE user_id = %s", (user_id,))
                user = cur.fetchone()
                
                if user and user['is_blocked']:
                    send_telegram_message(chat_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support")
                    conn.close()
                    return {'statusCode': 200, 'body': json.dumps({'ok': True})}
            
            if not check_rate_limit(conn, user_id, 'callback'):
                send_telegram_message(chat_id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
                conn.close()
                return {'statusCode': 200, 'body': json.dumps({'ok': True})}
            
            get_or_create_user(conn, user_id, username, first_name)
            
            if data == 'main_menu':
                handle_start(conn, user_id, username, first_name, chat_id)
            elif data == 'main_balance':
                handle_balance(conn, user_id, chat_id)
            elif data == 'main_topup':
                handle_topup(chat_id)
            elif data == 'main_create':
                handle_create(chat_id)
            elif data == 'main_help':
                handle_help(chat_id)
            elif data == 'create_preview':
                handle_create_preview(conn, user_id, chat_id)
        
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'ok': True})
        }
    
    except Exception as e:
        try:
            conn = get_db_connection()
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO error_logs (workflow_name, error_type, error_message, telegram_update, created_at)
                    VALUES (%s, %s, %s, %s, %s)
                """, ('telegram_webhook', type(e).__name__, str(e), json.dumps(body), datetime.now()))
            conn.commit()
            conn.close()
        except:
            pass
        
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': str(e)})
        }
